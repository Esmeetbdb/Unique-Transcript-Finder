import argparse
import sys
import os
import pickle

def make_db(args):
#	import merge_db as mdb
#	mdb.merge_db(args.input, args.database_name, args.min_len, args.min_cov, args.min_fpkm, args.min_tpm, args.min_iso)
	
	import count_transcripts as ct
	ct.run_ggfcomp(args.gffcompare_container,args.reference_transcriptome,args.input,args.out_prefix, args.target)
	transcript_counts,transcript_info = ct.count_transcripts(args.out_prefix, args.target)
	ct.counts_into_db(args.out_prefix, transcript_counts, args.database_name, args.target)

def query_db(args):
	if args.create_database_pickle == True:
		import build_pickle.py as bp
		bp.couts_from_db(args.database, args.target_dir)

	import query_db_test as qdb
	qdb.query_ind(args.database, args.patient_gtf, args.gffcompare_container, args.out_prefix, args.target_dir)
	tmap_dict = qdb.tmap_to_dict(args.patient_gtf, args.out_prefix)
	db_pickle = args.target_dir + args.database + '.pickle'
	db_dict = qdb.unpickle_db(db_pickle)

	qdb.annotate_counts(db_dict, tmap_dict, args.patient_gtf, args.out_prefix, args.target_dir)
	
def find_unique(args):
	import Find_unique as fu
	
	gene_list = fu.get_gene_list(args.gene_list)
	fu.get_all_unique(gene_list, args.patient_gtf,args.max_count, args.prefix)

def main():
	
	parser = argparse.ArgumentParser(description = "build, analyse and query a RNAseq transcript database")
	
	subparsers = parser.add_subparsers()
	
	parser_build = subparsers.add_parser("build", help = "build help")
	parser_build.add_argument("input", type=str, help = "path to input file that contains paths to all gtf files to be included in the database")
	parser_build.add_argument("gffcompare_container", type=str, help = "path to singularity container with gff compare")
	parser_build.add_argument("reference_transcriptome", type=str, help = "path to reference transcriptome/genome")
	parser_build.add_argument("--database_name","-n", type =str, default="transcript_database.gtf", help="name of the database. Database will be created in the current folder unless a path is specified. The final database with counts will have a _counts suffix.")
	parser_build.add_argument("--min_len","-m", type=int, default=50, help="minimum length of transcripts to be included in the database.")
	parser_build.add_argument("--min_cov","-c", type=int, default=0, help="minimum coverage of transcripts to be included in the database.")
	parser_build.add_argument("--min_fpkm","-F", type=int, default=0, help="minimum fpkm of transcripts to be included in the database.")
	parser_build.add_argument("--min_tpm","-T", type = int, default=0, help="minimum TPM of transcripts to be included in the database.")
	parser_build.add_argument("--min_iso","-f", type=float, default=0.0, help="minimum isoform frequency of transcripts to be included in the database")
	parser_build.add_argument("--out_prefix","-O",type=str, default = "transcript_database", help="out prefix for files generated by gff compare when counting transcript occurence in database")
	parser_build.add_argument("--target",type=str, default = "", help="Path where output files should be stored. Must end with \. If left empty files will be created in the current directory.")
	parser_build.set_defaults(func=make_db)

	parser_query = subparsers.add_parser("query", help = "build query")
	parser_query.add_argument("patient_gtf", type=str, help = "path to the GTF file with patient transcript information")
	parser_query.add_argument("gffcompare_container", type=str, help = "path to singularity container with gff compare")
	parser_query.add_argument("--database", type=str, default="transcript_database.gtf", help = "path to the database created in the build step or other database with transcript information in the correct format")
	parser_query.add_argument("--database_pickle", type=str, default = "transcript_database.gtf.pickle", help = "path to the pickle file containing count information obtained from the database")
	parser_query.add_argument("--create_database_pickle", type=bool, default = False, help = "If the pickle file with count information is lost this option can be used to make a new one prior to querying.")
	parser_build.add_argument("--target_dir",type=str, default = "", help="Path where output files should be stored. Must end with \. If left empty files will be created in the current directory.")
	parser_query.add_argument("--out_prefix", type=str, default = "query", help = "path to the GTF file with patient transcript information")
	parser_query.set_defaults(func=query_db)

	gene_list, gtf, max_count, prefix
	parser_unique = subparsers.add_parser("unique", help = "help unique")
	parser_unique.add_argument("gene_list", type=str, help = "path to the file that contains genes of interest")
	parser_unique.add_argument("patient_gtf", type=str, help = "path to the GTF file with patient transcript information")
	parser_unique.add_argument("max_count", type=int, help = "Max number of times a transcript can be found to be considered unique")
	parser_unique.add_argument("prefix", type=str, help="prefox for the output file that will contain the StringTie IDs of the unique transcripts")


	parser_unique.set_defaults(func=find_unique)

	args = parser.parse_args(sys.argv[1:])
	args.func(args)
	
if __name__ == '__main__':
	main()
